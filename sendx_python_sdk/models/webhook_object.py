# coding: utf-8

"""
    SendX REST API

    # SendX REST API Documentation  ## 🚀 Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - 🔒 **Security**: Team-based authentication with optional member-level access - 🎯 **Resource-Oriented**: RESTful design with clear resource boundaries - 📊 **Rich Data Models**: Three-layer model system (Input/Output/Internal) - 🔗 **Relationships**: Automatic prefix handling for resource relationships - 📈 **Scalable**: Built for high-volume email marketing operations  ## 🏗️ Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## 🔐 Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings → Team API Key  ## 🆔 Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## 📚 Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## 🎯 Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## 🛠️ SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## 📞 Support  Need help? Contact us: - 💬 **Website Chat**: Available on sendx.io - 📧 **Email**: hello@sendx.io - 📚 **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 

    The version of the OpenAPI document: 1.0.0
    Contact: hello@sendx.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WebhookObject(BaseModel):
    """
    WebhookObject
    """ # noqa: E501
    type: Optional[StrictInt] = Field(default=None, description="The type of the event.")
    time: Optional[StrictInt] = Field(default=None, description="The timestamp of the event in milliseconds since the epoch.")
    data: Optional[StrictStr] = Field(default=None, description="Arbitrary data associated with the event.")
    provider_message_id: Optional[StrictStr] = Field(default=None, description="Optional provider message ID.")
    campaign_id: Optional[StrictStr] = Field(default=None, description="Optional campaign ID.")
    drip_step_id: Optional[StrictStr] = Field(default=None, description="Optional drip step ID.")
    rss_exec_id: Optional[StrictStr] = Field(default=None, description="Optional RSS execution ID.")
    tag_id: Optional[StrictStr] = Field(default=None, description="Optional tag ID.")
    link: Optional[StrictStr] = Field(default=None, description="Optional link associated with the event.")
    list_id: Optional[StrictStr] = Field(default=None, description="Optional list ID.")
    contact_id: Optional[StrictStr] = Field(default=None, description="Optional contact ID.")
    custom_field_id: Optional[StrictStr] = Field(default=None, description="Optional custom field ID.")
    template_id: Optional[StrictStr] = Field(default=None, description="Optional template ID.")
    popup_id: Optional[StrictStr] = Field(default=None, description="Optional popup ID.")
    landing_page_id: Optional[StrictStr] = Field(default=None, description="Optional landing page ID.")
    form_id: Optional[StrictStr] = Field(default=None, description="Optional form ID.")
    segment_id: Optional[StrictStr] = Field(default=None, description="Optional segment ID.")
    automation_id: Optional[StrictStr] = Field(default=None, description="Optional automation ID.")
    drip_id: Optional[StrictStr] = Field(default=None, description="Optional drip ID.")
    rss_id: Optional[StrictStr] = Field(default=None, description="Optional RSS ID.")
    ab_test_id: Optional[StrictStr] = Field(default=None, description="Optional A/B test ID.")
    workflow_id: Optional[StrictStr] = Field(default=None, description="Optional workflow ID.")
    workflow_node_id: Optional[StrictStr] = Field(default=None, description="Optional workflow node ID.")
    workflow_email_id: Optional[StrictStr] = Field(default=None, description="Optional workflow email ID.")
    __properties: ClassVar[List[str]] = ["type", "time", "data", "provider_message_id", "campaign_id", "drip_step_id", "rss_exec_id", "tag_id", "link", "list_id", "contact_id", "custom_field_id", "template_id", "popup_id", "landing_page_id", "form_id", "segment_id", "automation_id", "drip_id", "rss_id", "ab_test_id", "workflow_id", "workflow_node_id", "workflow_email_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhookObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhookObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "time": obj.get("time"),
            "data": obj.get("data"),
            "provider_message_id": obj.get("provider_message_id"),
            "campaign_id": obj.get("campaign_id"),
            "drip_step_id": obj.get("drip_step_id"),
            "rss_exec_id": obj.get("rss_exec_id"),
            "tag_id": obj.get("tag_id"),
            "link": obj.get("link"),
            "list_id": obj.get("list_id"),
            "contact_id": obj.get("contact_id"),
            "custom_field_id": obj.get("custom_field_id"),
            "template_id": obj.get("template_id"),
            "popup_id": obj.get("popup_id"),
            "landing_page_id": obj.get("landing_page_id"),
            "form_id": obj.get("form_id"),
            "segment_id": obj.get("segment_id"),
            "automation_id": obj.get("automation_id"),
            "drip_id": obj.get("drip_id"),
            "rss_id": obj.get("rss_id"),
            "ab_test_id": obj.get("ab_test_id"),
            "workflow_id": obj.get("workflow_id"),
            "workflow_node_id": obj.get("workflow_node_id"),
            "workflow_email_id": obj.get("workflow_email_id")
        })
        return _obj


