# coding: utf-8

"""
    SendX REST API

    # Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

    The version of the OpenAPI document: 1.0.0
    Contact: support@sendx.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WebhookObject(BaseModel):
    """
    WebhookObject
    """ # noqa: E501
    type: Optional[StrictInt] = Field(default=None, description="The type of the event.")
    time: Optional[StrictInt] = Field(default=None, description="The timestamp of the event in milliseconds since the epoch.")
    data: Optional[StrictStr] = Field(default=None, description="Arbitrary data associated with the event.")
    provider_message_id: Optional[StrictStr] = Field(default=None, description="Optional provider message ID.")
    campaign_id: Optional[StrictStr] = Field(default=None, description="Optional campaign ID.")
    drip_step_id: Optional[StrictStr] = Field(default=None, description="Optional drip step ID.")
    rss_exec_id: Optional[StrictStr] = Field(default=None, description="Optional RSS execution ID.")
    tag_id: Optional[StrictStr] = Field(default=None, description="Optional tag ID.")
    link: Optional[StrictStr] = Field(default=None, description="Optional link associated with the event.")
    list_id: Optional[StrictStr] = Field(default=None, description="Optional list ID.")
    contact_id: Optional[StrictStr] = Field(default=None, description="Optional contact ID.")
    custom_field_id: Optional[StrictStr] = Field(default=None, description="Optional custom field ID.")
    template_id: Optional[StrictStr] = Field(default=None, description="Optional template ID.")
    popup_id: Optional[StrictStr] = Field(default=None, description="Optional popup ID.")
    landing_page_id: Optional[StrictStr] = Field(default=None, description="Optional landing page ID.")
    form_id: Optional[StrictStr] = Field(default=None, description="Optional form ID.")
    segment_id: Optional[StrictStr] = Field(default=None, description="Optional segment ID.")
    automation_id: Optional[StrictStr] = Field(default=None, description="Optional automation ID.")
    drip_id: Optional[StrictStr] = Field(default=None, description="Optional drip ID.")
    rss_id: Optional[StrictStr] = Field(default=None, description="Optional RSS ID.")
    ab_test_id: Optional[StrictStr] = Field(default=None, description="Optional A/B test ID.")
    workflow_id: Optional[StrictStr] = Field(default=None, description="Optional workflow ID.")
    workflow_node_id: Optional[StrictStr] = Field(default=None, description="Optional workflow node ID.")
    workflow_email_id: Optional[StrictStr] = Field(default=None, description="Optional workflow email ID.")
    __properties: ClassVar[List[str]] = ["type", "time", "data", "provider_message_id", "campaign_id", "drip_step_id", "rss_exec_id", "tag_id", "link", "list_id", "contact_id", "custom_field_id", "template_id", "popup_id", "landing_page_id", "form_id", "segment_id", "automation_id", "drip_id", "rss_id", "ab_test_id", "workflow_id", "workflow_node_id", "workflow_email_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhookObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if provider_message_id (nullable) is None
        # and model_fields_set contains the field
        if self.provider_message_id is None and "provider_message_id" in self.model_fields_set:
            _dict['provider_message_id'] = None

        # set to None if campaign_id (nullable) is None
        # and model_fields_set contains the field
        if self.campaign_id is None and "campaign_id" in self.model_fields_set:
            _dict['campaign_id'] = None

        # set to None if drip_step_id (nullable) is None
        # and model_fields_set contains the field
        if self.drip_step_id is None and "drip_step_id" in self.model_fields_set:
            _dict['drip_step_id'] = None

        # set to None if rss_exec_id (nullable) is None
        # and model_fields_set contains the field
        if self.rss_exec_id is None and "rss_exec_id" in self.model_fields_set:
            _dict['rss_exec_id'] = None

        # set to None if tag_id (nullable) is None
        # and model_fields_set contains the field
        if self.tag_id is None and "tag_id" in self.model_fields_set:
            _dict['tag_id'] = None

        # set to None if link (nullable) is None
        # and model_fields_set contains the field
        if self.link is None and "link" in self.model_fields_set:
            _dict['link'] = None

        # set to None if list_id (nullable) is None
        # and model_fields_set contains the field
        if self.list_id is None and "list_id" in self.model_fields_set:
            _dict['list_id'] = None

        # set to None if contact_id (nullable) is None
        # and model_fields_set contains the field
        if self.contact_id is None and "contact_id" in self.model_fields_set:
            _dict['contact_id'] = None

        # set to None if custom_field_id (nullable) is None
        # and model_fields_set contains the field
        if self.custom_field_id is None and "custom_field_id" in self.model_fields_set:
            _dict['custom_field_id'] = None

        # set to None if template_id (nullable) is None
        # and model_fields_set contains the field
        if self.template_id is None and "template_id" in self.model_fields_set:
            _dict['template_id'] = None

        # set to None if popup_id (nullable) is None
        # and model_fields_set contains the field
        if self.popup_id is None and "popup_id" in self.model_fields_set:
            _dict['popup_id'] = None

        # set to None if landing_page_id (nullable) is None
        # and model_fields_set contains the field
        if self.landing_page_id is None and "landing_page_id" in self.model_fields_set:
            _dict['landing_page_id'] = None

        # set to None if form_id (nullable) is None
        # and model_fields_set contains the field
        if self.form_id is None and "form_id" in self.model_fields_set:
            _dict['form_id'] = None

        # set to None if segment_id (nullable) is None
        # and model_fields_set contains the field
        if self.segment_id is None and "segment_id" in self.model_fields_set:
            _dict['segment_id'] = None

        # set to None if automation_id (nullable) is None
        # and model_fields_set contains the field
        if self.automation_id is None and "automation_id" in self.model_fields_set:
            _dict['automation_id'] = None

        # set to None if drip_id (nullable) is None
        # and model_fields_set contains the field
        if self.drip_id is None and "drip_id" in self.model_fields_set:
            _dict['drip_id'] = None

        # set to None if rss_id (nullable) is None
        # and model_fields_set contains the field
        if self.rss_id is None and "rss_id" in self.model_fields_set:
            _dict['rss_id'] = None

        # set to None if ab_test_id (nullable) is None
        # and model_fields_set contains the field
        if self.ab_test_id is None and "ab_test_id" in self.model_fields_set:
            _dict['ab_test_id'] = None

        # set to None if workflow_id (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_id is None and "workflow_id" in self.model_fields_set:
            _dict['workflow_id'] = None

        # set to None if workflow_node_id (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_node_id is None and "workflow_node_id" in self.model_fields_set:
            _dict['workflow_node_id'] = None

        # set to None if workflow_email_id (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_email_id is None and "workflow_email_id" in self.model_fields_set:
            _dict['workflow_email_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhookObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "time": obj.get("time"),
            "data": obj.get("data"),
            "provider_message_id": obj.get("provider_message_id"),
            "campaign_id": obj.get("campaign_id"),
            "drip_step_id": obj.get("drip_step_id"),
            "rss_exec_id": obj.get("rss_exec_id"),
            "tag_id": obj.get("tag_id"),
            "link": obj.get("link"),
            "list_id": obj.get("list_id"),
            "contact_id": obj.get("contact_id"),
            "custom_field_id": obj.get("custom_field_id"),
            "template_id": obj.get("template_id"),
            "popup_id": obj.get("popup_id"),
            "landing_page_id": obj.get("landing_page_id"),
            "form_id": obj.get("form_id"),
            "segment_id": obj.get("segment_id"),
            "automation_id": obj.get("automation_id"),
            "drip_id": obj.get("drip_id"),
            "rss_id": obj.get("rss_id"),
            "ab_test_id": obj.get("ab_test_id"),
            "workflow_id": obj.get("workflow_id"),
            "workflow_node_id": obj.get("workflow_node_id"),
            "workflow_email_id": obj.get("workflow_email_id")
        })
        return _obj


