# coding: utf-8

"""
    SendX REST API

    # Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

    The version of the OpenAPI document: 1.0.1
    Contact: support@sendx.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Campaign(BaseModel):
    """
    Campaign
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Encrypted ID of the campaign")
    name: Optional[StrictStr] = Field(default=None, description="Name of the campaign")
    track_reply: Optional[StrictBool] = Field(default=None, description="Indicates if replies to the campaign should be tracked", alias="trackReply")
    status: Optional[StrictInt] = Field(default=None, description="Campaign status: 0 (Draft), 1 (Scheduled), 2 (Sending), 3 (Sent), 4 (Quarantined)")
    schedule_type: Optional[StrictInt] = Field(default=None, description="Schedule type: 0 (Schedule later), 1 (Send Now), 2 (Trigger via automation), 3 (Recurring)", alias="scheduleType")
    schedule_condition: Optional[StrictStr] = Field(default=None, description="Condition for scheduling the campaign", alias="scheduleCondition")
    time_condition: Optional[StrictStr] = Field(default=None, description="Time-related condition for the campaign", alias="timeCondition")
    timezone: Optional[StrictStr] = Field(default=None, description="Timezone for the scheduled send")
    preferred_time_condition: Optional[StrictStr] = Field(default=None, description="Preferred time condition for the campaign", alias="preferredTimeCondition")
    preferred_timezone: Optional[StrictStr] = Field(default=None, description="Preferred timezone for sending the campaign", alias="preferredTimezone")
    strategy: Optional[StrictStr] = Field(default=None, description="Strategy for the campaign")
    send_in_contacts_timezone: Optional[StrictBool] = Field(default=None, description="Indicates if the campaign should be sent in the recipient's timezone", alias="sendInContactsTimezone")
    smart_send: Optional[StrictBool] = Field(default=None, description="Indicates if smart sending should be used", alias="smartSend")
    is_archived: Optional[StrictBool] = Field(default=None, description="Indicates if the campaign is archived", alias="isArchived")
    sender: Optional[StrictStr] = Field(default=None, description="Information about the sender of the campaign")
    campaign_screenshot_url: Optional[StrictStr] = Field(default=None, description="URL of the campaign's screenshot", alias="campaignScreenshotUrl")
    included_segments: Optional[List[StrictStr]] = Field(default=None, description="Segments to be included in the campaign", alias="includedSegments")
    included_lists: Optional[List[StrictStr]] = Field(default=None, description="Lists to be included in the campaign", alias="includedLists")
    included_tags: Optional[List[StrictStr]] = Field(default=None, description="Tags to be included in the campaign", alias="includedTags")
    excluded_segments: Optional[List[StrictStr]] = Field(default=None, description="Segments to be excluded from the campaign", alias="excludedSegments")
    excluded_lists: Optional[List[StrictStr]] = Field(default=None, description="Lists to be excluded from the campaign", alias="excludedLists")
    excluded_tags: Optional[List[StrictStr]] = Field(default=None, description="Tags to be excluded from the campaign", alias="excludedTags")
    __properties: ClassVar[List[str]] = ["id", "name", "trackReply", "status", "scheduleType", "scheduleCondition", "timeCondition", "timezone", "preferredTimeCondition", "preferredTimezone", "strategy", "sendInContactsTimezone", "smartSend", "isArchived", "sender", "campaignScreenshotUrl", "includedSegments", "includedLists", "includedTags", "excludedSegments", "excludedLists", "excludedTags"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3, 4]):
            raise ValueError("must be one of enum values (0, 1, 2, 3, 4)")
        return value

    @field_validator('schedule_type')
    def schedule_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3]):
            raise ValueError("must be one of enum values (0, 1, 2, 3)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Campaign from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Campaign from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "trackReply": obj.get("trackReply"),
            "status": obj.get("status"),
            "scheduleType": obj.get("scheduleType"),
            "scheduleCondition": obj.get("scheduleCondition"),
            "timeCondition": obj.get("timeCondition"),
            "timezone": obj.get("timezone"),
            "preferredTimeCondition": obj.get("preferredTimeCondition"),
            "preferredTimezone": obj.get("preferredTimezone"),
            "strategy": obj.get("strategy"),
            "sendInContactsTimezone": obj.get("sendInContactsTimezone"),
            "smartSend": obj.get("smartSend"),
            "isArchived": obj.get("isArchived"),
            "sender": obj.get("sender"),
            "campaignScreenshotUrl": obj.get("campaignScreenshotUrl"),
            "includedSegments": obj.get("includedSegments"),
            "includedLists": obj.get("includedLists"),
            "includedTags": obj.get("includedTags"),
            "excludedSegments": obj.get("excludedSegments"),
            "excludedLists": obj.get("excludedLists"),
            "excludedTags": obj.get("excludedTags")
        })
        return _obj


