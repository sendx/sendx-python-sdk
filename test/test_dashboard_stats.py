# coding: utf-8

"""
    SendX REST API

    # Introduction The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sendx_python_sdk.models.dashboard_stats import DashboardStats

class TestDashboardStats(unittest.TestCase):
    """DashboardStats unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DashboardStats:
        """Test DashboardStats
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DashboardStats`
        """
        model = DashboardStats()
        if include_optional:
            return DashboardStats(
                last_email_campaign_stat = sendx_python_sdk.models.last_sent_campaign_stat.LastSentCampaignStat(
                    campaign = sendx_python_sdk.models.campaign_dashboard_data.CampaignDashboardData(
                        id = 1, 
                        name = 'Weekly Newsletter', 
                        subject = 'This Week's Highlights', 
                        sent_time = '2024-09-30T14:00Z', 
                        campaign_screenshot_url = 'http://example.com/screenshot.png', ), 
                    sent = 100, 
                    delivered = 90, 
                    subscribed = 10, 
                    unsubscribed = 5, 
                    open = 50, 
                    link_clicked = 20, 
                    replied = 3, ),
                newsletter_count = 10,
                automation_count = 5
            )
        else:
            return DashboardStats(
        )
        """

    def testDashboardStats(self):
        """Test DashboardStats"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
