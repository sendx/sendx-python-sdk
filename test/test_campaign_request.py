# coding: utf-8

"""
    SendX REST API

    # Introduction The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sendx_python_sdk.models.campaign_request import CampaignRequest

class TestCampaignRequest(unittest.TestCase):
    """CampaignRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CampaignRequest:
        """Test CampaignRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CampaignRequest`
        """
        model = CampaignRequest()
        if include_optional:
            return CampaignRequest(
                name = 'New Year Promotion',
                html_code = '<html><body><h1>Happy New Year!</h1></body></html>',
                subject = 'New Year Offer',
                sender = 'sender_123',
                preview_text = 'Exclusive New Year promotions inside',
                schedule_type = 1,
                schedule_condition = '2025-01-21',
                time_condition = '10:00 AM',
                timezone = 'America/New_York',
                preferred_timezone = 'America/Los_Angeles',
                preferred_time_condition = 'Send at 9 AM',
                send_in_contacts_timezone = True,
                smart_send = True,
                included_segments = ["segment_1","segment_2"],
                included_lists = ["list_1","list_2"],
                included_tags = ["tag_1","tag_2"],
                excluded_segments = ["segment_3"],
                excluded_lists = ["list_3"],
                excluded_tags = ["tag_3"]
            )
        else:
            return CampaignRequest(
        )
        """

    def testCampaignRequest(self):
        """Test CampaignRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
