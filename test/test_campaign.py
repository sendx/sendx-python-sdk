# coding: utf-8

"""
    SendX REST API

    # Introduction The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sendx_python_sdk.models.campaign import Campaign

class TestCampaign(unittest.TestCase):
    """Campaign unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Campaign:
        """Test Campaign
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Campaign`
        """
        model = Campaign()
        if include_optional:
            return Campaign(
                id = 'campaign123xyz',
                name = 'New Year Promotion',
                track_reply = False,
                status = 1,
                schedule_type = 0,
                schedule_condition = 'Send at a specific time',
                time_condition = 'Send at 9:00 AM',
                timezone = 'America/New_York',
                preferred_time_condition = 'Send during work hours',
                preferred_timezone = 'America/Los_Angeles',
                strategy = 'Batch sending',
                send_in_contacts_timezone = True,
                smart_send = False,
                is_archived = False,
                sender = 'marketing@company.com',
                campaign_screenshot_url = 'https://example.com/screenshot.png',
                included_segments = ["VIP Customers","New Subscribers"],
                included_lists = ["List 1","List 2"],
                included_tags = ["Tag 1","Tag 2"],
                excluded_segments = ["Unsubscribed Users","Bounced Emails"],
                excluded_lists = ["List 3","List 4"],
                excluded_tags = ["Tag 3","Tag 4"]
            )
        else:
            return Campaign(
        )
        """

    def testCampaign(self):
        """Test Campaign"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
